Function CustomSearch(searchValue As Variant, searchColumn As Range, resultColumn As Range, _
                      Optional charLimit As Integer = 0, _
                      Optional occurrence As Integer = 0, Optional skipCount As Integer = 0, _
                      Optional multiLine As Integer = 0, _
                      Optional ignoreCharsAndSpaces As Boolean = False, Optional ignoreCase As Boolean = False, _
                      Optional includeKey As Boolean = False, _
                      Optional transposeResult As Boolean = False) As Variant
    ' Optimized Custom Search Function

    Dim searchArray As Variant, resultArray As Variant
    Dim rowCount As Long, colCount As Long
    Dim i As Long, j As Long
    Dim processedSearchValue As String, processedSearchCell As String
    Dim regex As Object
    Dim matchCount As Long, validMatchesCount As Long
    Dim lastRow As Long
    Dim matchArray() As Variant
    Dim tempMatches() As Variant  ' Ìàññèâ âìåñòî Collection äëÿ ñêîðîñòè
    Dim maxMatches As Long
    Dim currentPrecision As Long
    Dim isFullMatch As Boolean
    Dim compareLength As Long

    On Error GoTo ErrorHandler

    ' Validate input parameters (îáúåäèíåíî äëÿ ñêîðîñòè)
    If searchColumn.Columns.Count > 1 Then
        CustomSearch = "Error: searchColumn must be a single column."
        Exit Function
    End If
    If searchColumn.Rows.Count <> resultColumn.Rows.Count Or searchColumn.Row <> resultColumn.Row Then
        CustomSearch = "Error: searchColumn and resultColumn must have the same number of rows and start from the same row."
        Exit Function
    End If
    If occurrence < 0 Or skipCount < 0 Then
        CustomSearch = "Error: occurrence and skipCount must be non-negative integers."
        Exit Function
    End If
    If multiLine < 0 Or multiLine > 3 Then
        CustomSearch = "Error: multiLine must be 0, 1, 2, or 3."
        Exit Function
    End If

    ' Îïðåäåëÿåì ðåæèì ïîèñêà
    isFullMatch = (charLimit = 0)
    If isFullMatch Then
        currentPrecision = Len(searchValue)
    Else
        currentPrecision = charLimit
    End If

    ' Îïðåäåëÿåì äèàïàçîí äàííûõ
    If searchColumn.Rows.Count = searchColumn.Worksheet.Rows.Count Then
        lastRow = searchColumn.Cells(searchColumn.Rows.Count, 1).End(xlUp).Row
        searchArray = searchColumn.Resize(lastRow).Value
        resultArray = resultColumn.Resize(lastRow, resultColumn.Columns.Count).Value
        rowCount = lastRow
    Else
        rowCount = searchColumn.Rows.Count
        searchArray = searchColumn.Value
        resultArray = resultColumn.Resize(rowCount, resultColumn.Columns.Count).Value
    End If

    colCount = resultColumn.Columns.Count

    ' Ñîçäàåì RegExp òîëüêî åñëè íóæíî
    If ignoreCharsAndSpaces Then
        Set regex = CreateObject("VBScript.RegExp")
        regex.Global = True
        regex.ignoreCase = True
        regex.Pattern = "[^a-zA-Z0-9]"
        processedSearchValue = regex.Replace(CStr(searchValue), "")
    Else
        processedSearchValue = CStr(searchValue)
    End If

    If ignoreCase Then processedSearchValue = LCase(processedSearchValue)
    compareLength = Len(processedSearchValue)

    ' Èíèöèàëèçàöèÿ âðåìåííîãî ìàññèâà (èñïîëüçóåì ìàññèâ âìåñòî Collection)
    maxMatches = IIf(occurrence > 0, occurrence, 1000) ' Íà÷àëüíûé ðàçìåð
    ReDim tempMatches(1 To maxMatches, 1 To colCount + 1) ' +1 äëÿ êëþ÷à
    
    matchCount = 0
    validMatchesCount = 0

    ' Îñíîâíîé öèêë ïîèñêà
    For i = 1 To rowCount
        ' Ïðåäîáðàáîòêà çíà÷åíèÿ ÿ÷åéêè
        If ignoreCharsAndSpaces Then
            processedSearchCell = regex.Replace(CStr(searchArray(i, 1)), "")
        Else
            processedSearchCell = CStr(searchArray(i, 1))
        End If

        If ignoreCase Then processedSearchCell = LCase(processedSearchCell)

        ' Ïðîâåðêà ñîâïàäåíèÿ (îïòèìèçèðîâàíî)
        Dim isMatch As Boolean
        If isFullMatch Then
            isMatch = (processedSearchCell = processedSearchValue)
        Else
            ' Ïðîâåðÿåì äëèíó ïåðåä Left äëÿ ñêîðîñòè
            If Len(processedSearchCell) >= currentPrecision And compareLength >= currentPrecision Then
                isMatch = (Left(processedSearchCell, currentPrecision) = Left(processedSearchValue, currentPrecision))
            Else
                isMatch = False
            End If
        End If

        If isMatch Then
            matchCount = matchCount + 1
            
            If matchCount > skipCount Then
                validMatchesCount = validMatchesCount + 1
                
                ' Ðàñøèðÿåì ìàññèâ ïðè íåîáõîäèìîñòè
                If validMatchesCount > maxMatches Then
                    maxMatches = maxMatches + 1000
                    ReDim Preserve tempMatches(1 To maxMatches, 1 To colCount + 1)
                End If
                
                ' Ñîõðàíÿåì êëþ÷ åñëè íóæíî
                If includeKey Then
                    tempMatches(validMatchesCount, 1) = searchArray(i, 1)
                End If
                
                ' Ñîõðàíÿåì ðåçóëüòàòû
                If colCount > 1 Then
                    For j = 1 To colCount
                        tempMatches(validMatchesCount, j + 1) = IIf(IsEmpty(resultArray(i, j)), "", resultArray(i, j))
                    Next j
                Else
                    tempMatches(validMatchesCount, 2) = IIf(IsEmpty(resultArray(i, 1)), "", resultArray(i, 1))
                End If

                ' Âûõîä åñëè äîñòèãíóòî íóæíîå êîëè÷åñòâî
                If occurrence > 0 And validMatchesCount = occurrence Then Exit For
            End If
        End If
    Next i

    ' Ôîðìàòèðîâàíèå âûâîäà
    If validMatchesCount > 0 Then
        Select Case multiLine
            Case 0 ' Òàáëè÷íûé ôîðìàò
                If includeKey Then
                    ReDim matchArray(1 To validMatchesCount, 1 To colCount + 1)
                    For i = 1 To validMatchesCount
                        matchArray(i, 1) = tempMatches(i, 1)
                        For j = 1 To colCount
                            matchArray(i, j + 1) = tempMatches(i, j + 1)
                        Next j
                    Next i
                Else
                    ReDim matchArray(1 To validMatchesCount, 1 To colCount)
                    For i = 1 To validMatchesCount
                        For j = 1 To colCount
                            matchArray(i, j) = tempMatches(i, j + 1)
                        Next j
                    Next i
                End If

            Case 1 ' Îäíà êîëîíêà
                ReDim matchArray(1 To validMatchesCount, 1 To 1)
                For i = 1 To validMatchesCount
                    Dim rowValues As String
                    If colCount > 1 Then
                        Dim vals() As String
                        ReDim vals(1 To colCount)
                        For j = 1 To colCount
                            vals(j) = CStr(tempMatches(i, j + 1))
                        Next j
                        rowValues = Join(vals, ", ")
                    Else
                        rowValues = CStr(tempMatches(i, 2))
                    End If
                    
                    If includeKey Then
                        matchArray(i, 1) = tempMatches(i, 1) & ": " & rowValues
                    Else
                        matchArray(i, 1) = rowValues
                    End If
                Next i

            Case 2 ' Îäíà ñòðîêà
                ReDim matchArray(1 To 1, 1 To validMatchesCount)
                For i = 1 To validMatchesCount
                    If colCount > 1 Then
                        ReDim vals(1 To colCount)
                        For j = 1 To colCount
                            vals(j) = CStr(tempMatches(i, j + 1))
                        Next j
                        rowValues = Join(vals, ", ")
                    Else
                        rowValues = CStr(tempMatches(i, 2))
                    End If
                    
                    If includeKey Then
                        matchArray(1, i) = tempMatches(i, 1) & ": " & rowValues
                    Else
                        matchArray(1, i) = rowValues
                    End If
                Next i

            Case 3 ' Îäíà ÿ÷åéêà
                Dim result As String
                result = ""
                For i = 1 To validMatchesCount
                    If colCount > 1 Then
                        ReDim vals(1 To colCount)
                        For j = 1 To colCount
                            vals(j) = CStr(tempMatches(i, j + 1))
                        Next j
                        rowValues = Join(vals, ", ")
                    Else
                        rowValues = CStr(tempMatches(i, 2))
                    End If
                    
                    If includeKey Then
                        result = result & tempMatches(i, 1) & ": " & rowValues & "; " & vbNewLine
                    Else
                        result = result & rowValues & "; " & vbNewLine
                    End If
                Next i
                
                If Len(result) > 4 Then result = Left(result, Len(result) - 4)
                ReDim matchArray(1 To 1, 1 To 1)
                matchArray(1, 1) = result
        End Select

        If transposeResult Then
            CustomSearch = Application.WorksheetFunction.Transpose(matchArray)
        Else
            CustomSearch = matchArray
        End If
    Else
        CustomSearch = "Not Found"
    End If

    Exit Function

ErrorHandler:
    CustomSearch = "Error: " & Err.Description
End Function

